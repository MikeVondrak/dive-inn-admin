{
    "pipes": [],
    "interfaces": [
        {
            "name": "PhotoSet",
            "id": "interface-PhotoSet-a5d4ddbeb8459139c43d69e354b966e2a2489cada0690ae1db6f9371ad9031d79f09de034a1c5c6ff5ff2cba903dcaae2f41ec040d53facf83d80c9df4785d89",
            "file": "src/app/services/flickr/flickr.api.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PhotoSizes {\r\n  //id: number,\r\n  canblog: boolean,\r\n  canprint: boolean,\r\n  candownload: boolean\r\n  size: PhotoSize[]\r\n}\r\n\r\nexport interface PhotoSize {\r\n  //id: number,\r\n  label: string,\r\n  source: string,\r\n  width?: string,\r\n  height?: string,\r\n  media?: string,\r\n}\r\n\r\nexport interface PhotoSetPhoto {\r\n  id: string,\r\n  title: string,\r\n  isPublic: boolean,\r\n}\r\n\r\nexport interface PhotoSet {\r\n  id: string,\r\n  primary: string,\r\n  owner: string,\r\n  ownername: string,\r\n  photo: PhotoSetPhoto[],\r\n  page: number,\r\n  per_page: number,\r\n  perpage: number,\r\n  pages: number,\r\n  title: string,\r\n  total: number,\r\n}\r\n\r\n\r\nexport interface PhotoSetListEntry {\r\n  date_create: number,\r\n  description: {_content: string },\r\n  id: string,\r\n  photos: number,\r\n  title: { _content: string }\r\n}\r\n\r\nexport interface PhotoSetList {\r\n  page: number,\r\n  pages: number,\r\n  perpage: number,\r\n  total: number,\r\n  photoset: PhotoSetListEntry[]\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "owner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "ownername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "per_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "perpage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhotoSetPhoto[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PhotoSetList",
            "id": "interface-PhotoSetList-a5d4ddbeb8459139c43d69e354b966e2a2489cada0690ae1db6f9371ad9031d79f09de034a1c5c6ff5ff2cba903dcaae2f41ec040d53facf83d80c9df4785d89",
            "file": "src/app/services/flickr/flickr.api.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PhotoSizes {\r\n  //id: number,\r\n  canblog: boolean,\r\n  canprint: boolean,\r\n  candownload: boolean\r\n  size: PhotoSize[]\r\n}\r\n\r\nexport interface PhotoSize {\r\n  //id: number,\r\n  label: string,\r\n  source: string,\r\n  width?: string,\r\n  height?: string,\r\n  media?: string,\r\n}\r\n\r\nexport interface PhotoSetPhoto {\r\n  id: string,\r\n  title: string,\r\n  isPublic: boolean,\r\n}\r\n\r\nexport interface PhotoSet {\r\n  id: string,\r\n  primary: string,\r\n  owner: string,\r\n  ownername: string,\r\n  photo: PhotoSetPhoto[],\r\n  page: number,\r\n  per_page: number,\r\n  perpage: number,\r\n  pages: number,\r\n  title: string,\r\n  total: number,\r\n}\r\n\r\n\r\nexport interface PhotoSetListEntry {\r\n  date_create: number,\r\n  description: {_content: string },\r\n  id: string,\r\n  photos: number,\r\n  title: { _content: string }\r\n}\r\n\r\nexport interface PhotoSetList {\r\n  page: number,\r\n  pages: number,\r\n  perpage: number,\r\n  total: number,\r\n  photoset: PhotoSetListEntry[]\r\n}",
            "properties": [
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "perpage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "photoset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhotoSetListEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PhotoSetListEntry",
            "id": "interface-PhotoSetListEntry-a5d4ddbeb8459139c43d69e354b966e2a2489cada0690ae1db6f9371ad9031d79f09de034a1c5c6ff5ff2cba903dcaae2f41ec040d53facf83d80c9df4785d89",
            "file": "src/app/services/flickr/flickr.api.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PhotoSizes {\r\n  //id: number,\r\n  canblog: boolean,\r\n  canprint: boolean,\r\n  candownload: boolean\r\n  size: PhotoSize[]\r\n}\r\n\r\nexport interface PhotoSize {\r\n  //id: number,\r\n  label: string,\r\n  source: string,\r\n  width?: string,\r\n  height?: string,\r\n  media?: string,\r\n}\r\n\r\nexport interface PhotoSetPhoto {\r\n  id: string,\r\n  title: string,\r\n  isPublic: boolean,\r\n}\r\n\r\nexport interface PhotoSet {\r\n  id: string,\r\n  primary: string,\r\n  owner: string,\r\n  ownername: string,\r\n  photo: PhotoSetPhoto[],\r\n  page: number,\r\n  per_page: number,\r\n  perpage: number,\r\n  pages: number,\r\n  title: string,\r\n  total: number,\r\n}\r\n\r\n\r\nexport interface PhotoSetListEntry {\r\n  date_create: number,\r\n  description: {_content: string },\r\n  id: string,\r\n  photos: number,\r\n  title: { _content: string }\r\n}\r\n\r\nexport interface PhotoSetList {\r\n  page: number,\r\n  pages: number,\r\n  perpage: number,\r\n  total: number,\r\n  photoset: PhotoSetListEntry[]\r\n}",
            "properties": [
                {
                    "name": "date_create",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "photos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PhotoSetPhoto",
            "id": "interface-PhotoSetPhoto-a5d4ddbeb8459139c43d69e354b966e2a2489cada0690ae1db6f9371ad9031d79f09de034a1c5c6ff5ff2cba903dcaae2f41ec040d53facf83d80c9df4785d89",
            "file": "src/app/services/flickr/flickr.api.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PhotoSizes {\r\n  //id: number,\r\n  canblog: boolean,\r\n  canprint: boolean,\r\n  candownload: boolean\r\n  size: PhotoSize[]\r\n}\r\n\r\nexport interface PhotoSize {\r\n  //id: number,\r\n  label: string,\r\n  source: string,\r\n  width?: string,\r\n  height?: string,\r\n  media?: string,\r\n}\r\n\r\nexport interface PhotoSetPhoto {\r\n  id: string,\r\n  title: string,\r\n  isPublic: boolean,\r\n}\r\n\r\nexport interface PhotoSet {\r\n  id: string,\r\n  primary: string,\r\n  owner: string,\r\n  ownername: string,\r\n  photo: PhotoSetPhoto[],\r\n  page: number,\r\n  per_page: number,\r\n  perpage: number,\r\n  pages: number,\r\n  title: string,\r\n  total: number,\r\n}\r\n\r\n\r\nexport interface PhotoSetListEntry {\r\n  date_create: number,\r\n  description: {_content: string },\r\n  id: string,\r\n  photos: number,\r\n  title: { _content: string }\r\n}\r\n\r\nexport interface PhotoSetList {\r\n  page: number,\r\n  pages: number,\r\n  perpage: number,\r\n  total: number,\r\n  photoset: PhotoSetListEntry[]\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isPublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PhotoSize",
            "id": "interface-PhotoSize-a5d4ddbeb8459139c43d69e354b966e2a2489cada0690ae1db6f9371ad9031d79f09de034a1c5c6ff5ff2cba903dcaae2f41ec040d53facf83d80c9df4785d89",
            "file": "src/app/services/flickr/flickr.api.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PhotoSizes {\r\n  //id: number,\r\n  canblog: boolean,\r\n  canprint: boolean,\r\n  candownload: boolean\r\n  size: PhotoSize[]\r\n}\r\n\r\nexport interface PhotoSize {\r\n  //id: number,\r\n  label: string,\r\n  source: string,\r\n  width?: string,\r\n  height?: string,\r\n  media?: string,\r\n}\r\n\r\nexport interface PhotoSetPhoto {\r\n  id: string,\r\n  title: string,\r\n  isPublic: boolean,\r\n}\r\n\r\nexport interface PhotoSet {\r\n  id: string,\r\n  primary: string,\r\n  owner: string,\r\n  ownername: string,\r\n  photo: PhotoSetPhoto[],\r\n  page: number,\r\n  per_page: number,\r\n  perpage: number,\r\n  pages: number,\r\n  title: string,\r\n  total: number,\r\n}\r\n\r\n\r\nexport interface PhotoSetListEntry {\r\n  date_create: number,\r\n  description: {_content: string },\r\n  id: string,\r\n  photos: number,\r\n  title: { _content: string }\r\n}\r\n\r\nexport interface PhotoSetList {\r\n  page: number,\r\n  pages: number,\r\n  perpage: number,\r\n  total: number,\r\n  photoset: PhotoSetListEntry[]\r\n}",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PhotoSizes",
            "id": "interface-PhotoSizes-a5d4ddbeb8459139c43d69e354b966e2a2489cada0690ae1db6f9371ad9031d79f09de034a1c5c6ff5ff2cba903dcaae2f41ec040d53facf83d80c9df4785d89",
            "file": "src/app/services/flickr/flickr.api.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PhotoSizes {\r\n  //id: number,\r\n  canblog: boolean,\r\n  canprint: boolean,\r\n  candownload: boolean\r\n  size: PhotoSize[]\r\n}\r\n\r\nexport interface PhotoSize {\r\n  //id: number,\r\n  label: string,\r\n  source: string,\r\n  width?: string,\r\n  height?: string,\r\n  media?: string,\r\n}\r\n\r\nexport interface PhotoSetPhoto {\r\n  id: string,\r\n  title: string,\r\n  isPublic: boolean,\r\n}\r\n\r\nexport interface PhotoSet {\r\n  id: string,\r\n  primary: string,\r\n  owner: string,\r\n  ownername: string,\r\n  photo: PhotoSetPhoto[],\r\n  page: number,\r\n  per_page: number,\r\n  perpage: number,\r\n  pages: number,\r\n  title: string,\r\n  total: number,\r\n}\r\n\r\n\r\nexport interface PhotoSetListEntry {\r\n  date_create: number,\r\n  description: {_content: string },\r\n  id: string,\r\n  photos: number,\r\n  title: { _content: string }\r\n}\r\n\r\nexport interface PhotoSetList {\r\n  page: number,\r\n  pages: number,\r\n  perpage: number,\r\n  total: number,\r\n  photoset: PhotoSetListEntry[]\r\n}",
            "properties": [
                {
                    "name": "canblog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "candownload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "canprint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhotoSize[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-e08daeec5b5d70020088c58e780e94a5a1f4335c2c19008eff13123e86df5debfa46167d2306673ec33ce74187bb32449b4d560f4d6dec8783721758b97014a4",
            "file": "src/app/auth/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "authenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authenticated$",
                    "defaultValue": "this.afAuth.authState.pipe(\r\n    map((authState) => !!authState)\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "token$",
                    "defaultValue": "this.afAuth.idTokenResult.pipe(\r\n    filter((authState) => !!authState),\r\n    first(),\r\n    map((idToken) => idToken ? idToken.token : '')\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "uid$",
                    "defaultValue": "this.afAuth.authState.pipe(map(authState => authState?.uid))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "this.afAuth.authState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<firebase.User | null>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "username$",
                    "defaultValue": "this.user$.pipe(\r\n    map((user: firebase.User | null) => user?.displayName ? user.displayName : 'Unknown User'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllowedUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loginGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, filter, first, tap, mergeMap, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  public authenticated: boolean = false;\r\n  public authenticated$: Observable<boolean> = this.afAuth.authState.pipe(\r\n    map((authState) => !!authState)\r\n  );\r\n  public uid$: Observable<string | undefined> = this.afAuth.authState.pipe(map(authState => authState?.uid));\r\n  public user$: Observable<firebase.User | null> = this.afAuth.authState;\r\n  public username$: Observable<string> = this.user$.pipe(\r\n    map((user: firebase.User | null) => user?.displayName ? user.displayName : 'Unknown User'));\r\n\r\n    \r\n  token$: Observable<string> = this.afAuth.idTokenResult.pipe(\r\n    filter((authState) => !!authState),\r\n    first(),\r\n    map((idToken) => idToken ? idToken.token : '')\r\n  );\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private afAuth: AngularFireAuth\r\n  ) {\r\n    this.afAuth.authState.subscribe((authState) => {\r\n      if (authState) {                \r\n        this.afAuth.idTokenResult\r\n          .pipe(\r\n            first(),\r\n            tap((token) => {\r\n              if (!!token) {\r\n                const expires =\r\n                  new Date(token.expirationTime).toLocaleDateString() +\r\n                  ' ' +\r\n                  new Date(token.expirationTime).toLocaleTimeString();\r\n              }\r\n            })\r\n          )\r\n          .subscribe((token) => {\r\n            this.authenticated = true;\r\n            localStorage.setItem('accessToken', token ? JSON.stringify(token) : '');\r\n          });\r\n      } else {\r\n        this.authenticated = false;\r\n        localStorage.removeItem('accessToken');\r\n      }\r\n    });\r\n  }\r\n\r\n  public loginGoogle(): void { // Promise<firebase.auth.UserCredential> {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    this.afAuth.signInWithPopup(provider)\r\n      .then(userCreds => {\r\n        this.router.navigateByUrl('admin');\r\n      })\r\n    .catch(err => {\r\n      // will error if popup is closed then re-opened, can still proceed\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.afAuth.signOut()\r\n      .then(() => this.router.navigateByUrl('login'))\r\n      .catch((err) => this.router.navigateByUrl('login'));\r\n\r\n  }\r\n\r\n  public getAllowedUser(): Observable<boolean> {\r\n    return this.uid$.pipe(\r\n      mergeMap(uid => {\r\n        const coll = firebase.firestore().collection('allow_users');\r\n        const docRef = coll.doc(uid);\r\n        return docRef.get();\r\n      }),\r\n      map(doc => {\r\n        return doc.exists;\r\n      }),\r\n      catchError(err => {\r\n        console.log('ALLOWED USER ERROR: ' + err)\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-9268e10e0767c6090f225b8c17658e0708df3a66f850ec748e929ee6603cc2eb1cccc82d5a5f77726ef11da91ce5ba4a080867d3648ae8823db173b9e6b1b0f9-1",
            "file": "src/app/auth/services/auth/auth.service.org.ts",
            "properties": [],
            "methods": [
                {
                    "name": "emailSignup",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "googleLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "oAuthLogin",
                    "args": [
                        {
                            "name": "provider",
                            "type": "firebase.auth.AuthProvider",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "provider",
                            "type": "firebase.auth.AuthProvider",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport firebase from 'firebase/app';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private afAuth: AngularFireAuth,\r\n    private router: Router) {}\r\n\r\n  login(email: string, password: string) {\r\n    this.afAuth.signInWithEmailAndPassword(email, password)\r\n    .then(value => {\r\n      console.log('Nice, it worked!');\r\n      this.router.navigateByUrl('/profile');\r\n    })\r\n    .catch(err => {\r\n      console.log('Something went wrong: ', err.message);\r\n    });\r\n  }\r\n\r\n  emailSignup(email: string, password: string) {\r\n    this.afAuth.createUserWithEmailAndPassword(email, password)\r\n    .then(value => {\r\n     console.log('Sucess', value);\r\n     this.router.navigateByUrl('/profile');\r\n    })\r\n    .catch(error => {\r\n      console.log('Something went wrong: ', error);\r\n    });\r\n  }\r\n\r\n  googleLogin() {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    return this.oAuthLogin(provider)\r\n      .then(value => {\r\n     console.log('Sucess', value),\r\n     this.router.navigateByUrl('/profile');\r\n   })\r\n    .catch(error => {\r\n      console.log('Something went wrong: ', error);\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.afAuth.signOut().then(() => {\r\n      this.router.navigate(['/']);\r\n    });\r\n  }\r\n\r\n  private oAuthLogin(provider: firebase.auth.AuthProvider) {\r\n    return this.afAuth.signInWithPopup(provider);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AuthService-1"
        },
        {
            "name": "FlickrApiService",
            "id": "injectable-FlickrApiService-85d11245dda8f35c0891469f2767c4135c146722cb8111eeeaa8da2be9bc37ef2247df2b1b192d10d5d77aa5f2560f8b15eb7747e9360eccfd1d11f7ee4d09f2",
            "file": "src/app/services/flickr/flickr.api.service.ts",
            "properties": [
                {
                    "name": "albumId",
                    "defaultValue": "'72157719812376042'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "apiArgs",
                    "defaultValue": "'&format=json&nojsoncallback=1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "apiKey",
                    "defaultValue": "`&api_key=${environment.flickrConfig.key}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "photoSetList",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<PhotoSetList> | null",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "photoSetLoaded$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoSetLoading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoSets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoSizes",
                    "defaultValue": "new Map<string, PhotoSizes>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | PhotoSizes>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "urlApiId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "urlApiType",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "urlRoot",
                    "defaultValue": "'https://api.flickr.com/services/rest/?method=flickr.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "userId",
                    "defaultValue": "`&user_id=${environment.flickrConfig.user}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPhotoSet",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PhotoSet | undefined>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPhotoSetPreviewThumbnailUrls",
                    "args": [
                        {
                            "name": "photoSetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "photoSetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPhotoSets",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PhotoSetList>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPhotoThumbnailUrl",
                    "args": [
                        {
                            "name": "photoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "photoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, concat, forkJoin, observable, Observable, of, Subject } from 'rxjs';\r\nimport { filter, flatMap, map, mergeMap, publishReplay, refCount, shareReplay, switchMap, take, tap } from 'rxjs/operators';\r\nimport { PhotoSet, PhotoSetList, PhotoSetListEntry, PhotoSize, PhotoSizes } from './flickr.api.model';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FlickrApiService {\r\n\r\n  private readonly urlRoot: string = 'https://api.flickr.com/services/rest/?method=flickr.';\r\n\r\n  private urlApiType: string = ''; // NEED TO TYPE/ENUM: photosets, photos\r\n\r\n  private urlApiId: string = ''; // NEED TO TYPE/ENUM - photosets: getList, getPhotos; photos: getSizes \r\n\r\n  private readonly apiKey: string = `&api_key=${environment.flickrConfig.key}`;\r\n  private readonly userId: string = `&user_id=${environment.flickrConfig.user}`;\r\n  private readonly apiArgs: string = '&format=json&nojsoncallback=1';\r\n\r\n  private readonly albumId: string = '72157719812376042';\r\n\r\n  // caching\r\n  private photoSetList: Observable<PhotoSetList> | null = null;\r\n  public photoSets: { id: string, set$: Observable<PhotoSet> }[] = []; // TODO: make a proper type for this\r\n  public photoSizes: Map<string, PhotoSizes> = new Map<string, PhotoSizes>(); // PhotoSizes[] = [];\r\n\r\n  public photoSetLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  public photoSetLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getPhotoSet(id: string): Observable<PhotoSet | undefined> {\r\n    let url = this.urlRoot + 'photosets.getPhotos' + this.apiKey + this.userId + '&photoset_id=' + id + this.apiArgs;\r\n    \r\n    const set = this.photoSets.find(set => set.id === id);\r\n    if (!!set) {\r\n      console.log('CACHED PHOTOSET');\r\n      return set.set$;\r\n    }\r\n    console.log('LOADING PHOTOSET');\r\n    this.photoSetLoaded$.next(false);\r\n    this.photoSetLoading$.next(true);\r\n    const ret$ = this.http.get<{ photoset: PhotoSet}>(url).pipe(\r\n      publishReplay(1),\r\n      refCount(),\r\n      tap(() => { this.photoSetLoading$.next(false); this.photoSetLoaded$.next(true); }),\r\n      map(obj => obj.photoset)\r\n    );\r\n\r\n    this.photoSets.push({ id: id, set$: ret$ });\r\n\r\n    return ret$;\r\n  }\r\n\r\n  public getPhotoSets(): Observable<PhotoSetList> {\r\n    let url = this.urlRoot + 'photosets.getList' + this.apiKey + this.userId + this.apiArgs;\r\n    \r\n    if (!this.photoSetList) {\r\n      let photosetList = this.http.get<{ photosets: PhotoSetList }>(url).pipe(\r\n        publishReplay(1),\r\n        refCount(),\r\n        map(returnVal => returnVal.photosets)\r\n      );\r\n      this.photoSetList = photosetList;\r\n    }\r\n    \r\n    return this.photoSetList;\r\n  }\r\n\r\n  public getPhotoThumbnailUrl(photoId: string): Observable<string> {\r\n    const joiner = '&';\r\n    const thumbnailString = 'Thumbnail';\r\n    let url = this.urlRoot + 'photos.getSizes' + this.apiKey + joiner + 'photo_id=' + photoId + this.apiArgs;\r\n    \r\n    if (this.photoSizes.has(photoId)) {\r\n      console.log('CACHED PHOTO SIZE: ' + photoId);\r\n      const sizes = this.photoSizes.get(photoId);\r\n      return of(sizes?.size?.find(s => s.label === thumbnailString)?.source || '');\r\n    }\r\n\r\n    return this.http.get<{ sizes: PhotoSizes }>(url).pipe(\r\n      map(val => {\r\n        this.photoSizes.set(photoId, val.sizes);\r\n        return val.sizes?.size?.find(size => size.label === thumbnailString)?.source || '';\r\n      })\r\n    );\r\n  }\r\n\r\n  public getPhotoSetPreviewThumbnailUrls(photoSetId: string): Observable<string[]> {\r\n    const numberOfThumbs = 5;\r\n    const photoSetPhoto$ = this.getPhotoSet(photoSetId).pipe(\r\n      filter(photoSet => !!photoSet),\r\n      map(photoSet => {\r\n        return photoSet?.photo.slice(0, 5) || [];\r\n      }));\r\n    const photoSetPhotoIds$ = photoSetPhoto$.pipe(map(photoSetPhoto => photoSetPhoto.map(photo => photo.id)));\r\n    \r\n    const a: Observable<string>[] = [];\r\n    const photoSetPhotoUrls$: Observable<string[]> = photoSetPhotoIds$.pipe(\r\n      flatMap(idArray => {\r\n        idArray.forEach(id => {\r\n          const thumbUrl = this.getPhotoThumbnailUrl(id);\r\n          a.push(thumbUrl);\r\n        });\r\n        const fj: Observable<string[]> = forkJoin(a);\r\n        this.photoSetLoaded$.next(true);\r\n        this.photoSetLoading$.next(false);\r\n        return fj;\r\n      })\r\n    );\r\n    this.photoSetLoaded$.next(false);\r\n    this.photoSetLoading$.next(true);\r\n    return photoSetPhotoUrls$;\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-97bfa454de74fd4032817b7047db0ebbbe15c43ad89ba941db9717d1e435099b55ef0d94aa410bd6b73fa2f8266bea1d68edee8dd42e7f639aa003c16dbd2f3f",
            "file": "src/app/auth/services/guard/auth.guard.ts",
            "properties": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canDeactivate",
                    "args": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentRoute",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nextState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanDeactivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, takeUntil, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate, CanDeactivate<unknown> {\r\n\r\n  constructor(private afAuth: AngularFireAuth, private router: Router) {}\r\n\r\n  private destroy$: Subject<boolean> = new Subject<boolean>();\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.afAuth.idToken.pipe(\r\n      takeUntil(this.destroy$),\r\n      tap((token) => {\r\n        if (!token) {\r\n          this.router.navigate(['login']);\r\n        }\r\n      }),\r\n      map((user) => !!user)\r\n    );\r\n  }\r\n  canDeactivate(\r\n    component: unknown,\r\n    currentRoute: ActivatedRouteSnapshot,\r\n    currentState: RouterStateSnapshot,\r\n    nextState?: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return true;\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AuthServiceMock",
            "id": "class-AuthServiceMock-eb896e6946748eca5651263e9501c6f45098bcbe2234ab31335221f610b28f5ea1ab31ea951a5fdfa28d1c3650dd924d55d81744fc450033305032dd0ac71e8a",
            "file": "src/app/auth/services/auth/auth.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class AuthServiceMock {\r\n  public loginGoogle = () => {};\r\n}",
            "properties": [
                {
                    "name": "loginGoogle",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FlickrApiServiceMock",
            "id": "class-FlickrApiServiceMock-52f90f5c1e5103c0638972147430c87575e061dafbdcf6f3fec90c965ef96b62d4a6e9186e71cbe81cbb0d2bf40abe88f78a732374627e738a69abfdc79567e4",
            "file": "src/app/services/flickr/flickr.api.service.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable, of } from \"rxjs\";\r\nimport { PhotoSet, PhotoSetList, PhotoSetListEntry } from \"./flickr.api.model\";\r\n//import { AlbumByLocation } from '../../features/albums/components/album-assigner/album-assigner.component';\r\n//import { HttpClient } from '@angular/common/http';\r\n\r\nconst photoSetListEntries: PhotoSetListEntry[] = [\r\n  {\r\n    id: 'id1',\r\n    date_create: 0,\r\n    description: { _content: 'PhotoSetListEntry 1 Description' },\r\n    photos: 10,\r\n    title: { _content: 'PhotoSetListEntry 1' },\r\n  }\r\n];\r\n\r\nconst photoSetList: PhotoSetList = {\r\n  page: 1,\r\n  perpage: 10,\r\n  pages: 20,\r\n  photoset: photoSetListEntries,\r\n  total: 201,\r\n};\r\n\r\nexport class FlickrApiServiceMock {\r\n  public getPhotoSets(id: string): Observable<PhotoSetList> { return of(photoSetList); }\r\n}\r\n\r\n\r\n// const mockAlbumsByLocation: AlbumByLocation = {\r\n//   albums: [],\r\n//   description: 'Test Description 1',\r\n//   id: 1,\r\n//   modified: false,\r\n//   name: 'Test Album By Location 1'\r\n// }",
            "properties": [],
            "methods": [
                {
                    "name": "getPhotoSets",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PhotoSetList>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AdminPageComponent",
            "id": "component-AdminPageComponent-91f0f677c941b3118bcb1a89218eba058d53af704eae1ede4d0947a9864385976a448de2dc762b2aff27e75a48166cfaf816098109fbb8f1bbe9dedd31d28e81",
            "file": "src/app/pages/admin-page/admin-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-page",
            "styleUrls": [
                "./admin-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allowedUser$",
                    "defaultValue": "this.authService.getAllowedUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "username$",
                    "defaultValue": "of('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nimport { AuthService } from 'src/app/auth/services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-page',\r\n  templateUrl: './admin-page.component.html',\r\n  styleUrls: ['./admin-page.component.scss']\r\n})\r\nexport class AdminPageComponent implements OnInit {\r\n\r\n  public username$: Observable<string> = of('');\r\n  public allowedUser$: Observable<boolean> = this.authService.getAllowedUser()\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../scss/utility';\r\n\r\n:host {\r\n  display: block;\r\n\r\n  background-color: utility.$dive-black;\r\n  color: utility.$dive-white;\r\n}",
                    "styleUrl": "./admin-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Admin Page</h1>"
        },
        {
            "name": "AlbumAssignerComponent",
            "id": "component-AlbumAssignerComponent-6ca33c3aa0d7ad99a054ec5aa27eb2107656838d3b873a3b94ac9ea865abfdb8ceeab110fcb356a2c44bc7849175a1e6e8d9461923b8fcdf70f7c9ae7b5a3a54",
            "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-album-assigner",
            "styleUrls": [
                "./album-assigner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./album-assigner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "locationList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AlbumByLocation[]>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoSets$",
                    "defaultValue": "this.flickrService.getPhotoSets().pipe(map(photoSetList => photoSetList.photoset))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<PhotoSetListEntry[]>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "queryRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryRef<AlbumByLocationResponse | AlbumByLocationVariables>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "photoSetChanged",
                    "args": [
                        {
                            "name": "photoSetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "location",
                            "type": "AlbumByLocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "photoSetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "location",
                            "type": "AlbumByLocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ApolloQueryResult } from '@apollo/client';\r\nimport { Apollo, gql, QueryRef } from 'apollo-angular';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { dataModifiedVar } from 'src/app/graphql.module';\r\nimport { PhotoSetListEntry } from 'src/app/services/flickr/flickr.api.model';\r\nimport { FlickrApiService } from 'src/app/services/flickr/flickr.api.service';\r\n\r\nexport type Album = {\r\n  id?: number,\r\n  album_location_id: number,\r\n  flickr_photo_set_id: string,\r\n  title: string,\r\n  description: string,\r\n  flickr_photo_set_id_num: number,\r\n}\r\n\r\nexport type AlbumByLocation = {\r\n  id: number,\r\n  name: string,\r\n  description: string,\r\n  albums: Album[],\r\n  modified: boolean,\r\n}\r\n\r\nexport type AlbumByLocationResponse = {\r\n  album_location: AlbumByLocation[],\r\n}\r\nexport type AlbumByLocationVariables = {};\r\n\r\n@Component({\r\n  selector: 'app-album-assigner',\r\n  templateUrl: './album-assigner.component.html',\r\n  styleUrls: ['./album-assigner.component.scss']\r\n})\r\nexport class AlbumAssignerComponent implements OnInit {\r\n\r\n  private queryRef: QueryRef<AlbumByLocationResponse, AlbumByLocationVariables>;\r\n\r\n  public locationList$: Observable<AlbumByLocation[]>;\r\n  public photoSets$: Observable<PhotoSetListEntry[]> = this.flickrService.getPhotoSets().pipe(map(photoSetList => photoSetList.photoset));\r\n\r\n  //public model = \"72157719812376050\";\r\n\r\n  constructor(\r\n    private apolloService: Apollo,\r\n    private flickrService: FlickrApiService,\r\n  ) { \r\n    const queryObject = gql`\r\n      query GetAlbums {\r\n        album_location {\r\n          __typename\r\n          id\r\n          name\r\n          description\r\n          albums {\r\n            __typename\r\n            id\r\n            flickr_photo_set_id\r\n            title\r\n            description\r\n          }\r\n          modified @client\r\n        }\r\n      }\r\n    `;\r\n\r\n    this.queryRef = this.apolloService.watchQuery<AlbumByLocationResponse, AlbumByLocationVariables>({\r\n      query: queryObject,\r\n      variables: {}\r\n    });\r\n\r\n    this.locationList$ = this.queryRef.valueChanges.pipe(map(respose => respose.data.album_location));\r\n    this.queryRef.valueChanges.subscribe(value => console.log('APOLLO: ', {value}));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  \r\n  public photoSetChanged(photoSetId: string, location: AlbumByLocation) {\r\n    localStorage.setItem('dataModified', 'true');\r\n    dataModifiedVar(true);\r\n\r\n    //debugger;\r\n    const locationAlbum = location.albums?.[0];\r\n    // get flickr PhotoSet via ID\r\n    \r\n    this.photoSets$.pipe(map(photoSetListEntries => {\r\n      return photoSetListEntries.find(entry => entry.id === photoSetId)\r\n    })).subscribe(flickrPhotoSet => {\r\n\r\n      // convert PhotoSet into Album\r\n      const newAlbum: Album = {\r\n        id: locationAlbum?.id,\r\n        album_location_id: location.id || -1,\r\n        flickr_photo_set_id: photoSetId,\r\n        flickr_photo_set_id_num: 0,\r\n        title: flickrPhotoSet?.title?._content || 'No Flickr Data',\r\n        description: flickrPhotoSet?.description?._content || 'No Flickr Data',\r\n      };\r\n\r\n      // const mutationObject = gql`\r\n      //   mutation SetLocationAlbum($albumId: Int!, $flickrPhotoSetId: String!) {\r\n      //     update_album_by_pk(pk_columns: {id: $albumId}, _set: {flickr_photo_set_id: $flickrPhotoSetId}) {\r\n      //       id\r\n      //       flickr_photo_set_id\r\n      //       album_location_id\r\n      //     }\r\n      //   }\r\n      // `;\r\n      const input = {}; // &#R%&*$R%*@#$*(&@&*$@$&*@$*&@*$&*)\r\n\r\n      const mutationObject = gql`\r\n        mutation SetLocationAlbum($input: album_insert_input!) {\r\n          insert_album_one(object: $input, on_conflict: { constraint: album_pkey, update_columns: [title, description, flickr_photo_set_id] }) {\r\n            id\r\n            flickr_photo_set_id\r\n            album_location_id\r\n          }\r\n        }\r\n      `;\r\n\r\n      console.log('APOLLO MUTATE ATTEMPT: ', {location}, {newAlbum});\r\n\r\n      this.apolloService.mutate({ mutation: mutationObject, variables: { input: newAlbum }}).subscribe(\r\n        (data) => { \r\n          console.log('APOLLO MUTATE: ', {data});\r\n          \r\n        },\r\n        (err) => { console.error(err); }\r\n      );\r\n    });\r\n    \r\n    \r\n\r\n    // TODO - need mutation to update either album on AlbumByLocation or whole AlbumByLocation?\r\n\r\n    // can't modify location since it's coming from an observable(?)\r\n    // location.modified = true;\r\n    // if (location.albums.length > 0) {\r\n    //   location.albums = [];\r\n    // }\r\n    // location.albums.push(newAlbum);\r\n    \r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./album-assigner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apolloService",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "flickrService",
                        "type": "FlickrApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "apolloService",
                        "type": "Apollo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "flickrService",
                        "type": "FlickrApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"(locationList$ | async) as albumByLocation; else loadingText\">\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Location</th>\r\n        <th>Album</th>\r\n        <th>Modified</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let location of albumByLocation; index as i\">\r\n        <td>{{ location.description }}</td>\r\n        <td>\r\n          <select [ngModel]=\"location.albums[0]?.flickr_photo_set_id?.toString()\" (ngModelChange)=\"photoSetChanged($event, location)\">\r\n            <option [value]=\"null\" disabled selected hidden>Choose an album</option>\r\n            <option *ngFor=\"let photoSet of photoSets$ | async\" [value]=\"photoSet.id\">\r\n              {{photoSet.title._content}}\r\n            </option>\r\n          </select>\r\n        </td>\r\n        <td>\r\n          {{ location.modified }}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n<ng-template #loadingText>\r\n  Loading...\r\n</ng-template>"
        },
        {
            "name": "AlbumsComponent",
            "id": "component-AlbumsComponent-40abac35d6b21b4c80bad5492b1f9cde79ef6ab31691c71ef2286098031b976a683d7dde6ce697ea9749d484cd1ffd533396b2188ee48493e41155116301b566",
            "file": "src/app/features/albums/albums.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-albums",
            "styleUrls": [
                "./albums.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./albums.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-albums',\r\n  templateUrl: './albums.component.html',\r\n  styleUrls: ['./albums.component.scss']\r\n})\r\nexport class AlbumsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./albums.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Albums</h1>\r\n<app-album-assigner></app-album-assigner>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-502867f70b329528fda0a54bfefe9d8bcbfaaf57ee3562eb337d1676dca470111086f8c98b76fc9a79b7514977c303b8897432a7b12cea16c9ed19f2719ae39a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "headerAnimationState$",
                    "defaultValue": "this.isAuthenticated$.pipe(map(isAllowed => isAllowed ? 'allowed' : 'notAllowed'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAllowed$",
                    "defaultValue": "this.authService.getAllowedUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAuthenticated$",
                    "defaultValue": "this.authService.authenticated$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "username$",
                    "defaultValue": "this.authService.username$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { headerAnimations } from './animations/header.animations';\r\nimport { AuthService } from './auth/services/auth/auth.service';\r\nimport { dataModifiedVar } from './graphql.module';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n  animations: [headerAnimations]\r\n})\r\nexport class AppComponent implements OnInit {\r\n  \r\n  public isAuthenticated$: Observable<boolean> = this.authService.authenticated$;\r\n  public isAllowed$: Observable<boolean> = this.authService.getAllowedUser();\r\n  \r\n  public headerAnimationState$: Observable<string> = this.isAuthenticated$.pipe(map(isAllowed => isAllowed ? 'allowed' : 'notAllowed'));\r\n  public username$: Observable<string> = this.authService.username$;\r\n  \r\n  constructor(\r\n    private authService: AuthService,\r\n  ) {\r\n    console.log('App start');\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  public logout() {\r\n    this.authService.logout();\r\n  }\r\n\r\n  public save() {\r\n    localStorage.setItem('dataModified', 'false');\r\n    dataModifiedVar(false);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use './scss/utility';\r\n\r\n:host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh; // combined with html/body in styles.scss for flexbox 'sticky-footer'\r\n  \r\n  header {\r\n    position: relative;\r\n    //display: flex;\r\n    //flex-direction: column;\r\n    //justify-content: space-around;\r\n    //align-items: center;\r\n    padding: 1rem;\r\n    //text-align: center;\r\n    font-weight: normal;\r\n    img {\r\n      display: inline-block;\r\n      position: absolute;\r\n      top: 1rem;\r\n      left: 1rem;\r\n      width: 100%;\r\n      max-width: 450px;\r\n      z-index: -1;\r\n      @include utility.media-breakpoint-gte(sm) {\r\n        width: 90%;\r\n      }\r\n    }\r\n    app-main-nav {\r\n      position: relative;\r\n      display: inline-block;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n    }\r\n    h1 {\r\n      display: inline-block;\r\n      position: absolute;\r\n      left: 50%;\r\n      top: 400px;\r\n      transform: translateX(-50%);\r\n      font-size: 3rem;\r\n    }\r\n    .creds {\r\n      position: absolute;\r\n      right: 1rem;\r\n      top: 1rem;\r\n      button {\r\n        font-size: 1rem;\r\n        margin-left: 1rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  main {\r\n    flex: 1 0 0;\r\n    padding: 2rem;\r\n  }\r\n\r\n  footer {\r\n    height: 3rem;\r\n    background-color: utility.$dive-red;\r\n  }\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header \r\n  [class.logged-in]=\"isAllowed$ | async\"\r\n>\r\n  <img src=\"/assets/images/logoLg.png\" \r\n    [@logoTransitions]=\"headerAnimationState$ | async\"    \r\n  />\r\n\r\n  <app-main-nav *ngIf=\"isAuthenticated$ | async as isAuthenticated\"\r\n  ></app-main-nav>\r\n\r\n  <h1 [@headerTransitions]=\"headerAnimationState$ | async\">Dive Inn Admin</h1>\r\n\r\n  <div class=\"creds\" *ngIf=\"isAuthenticated$ | async as isAuthenticated\">    \r\n    {{ username$ | async }}\r\n    <button\r\n      (click)=\"logout()\"\r\n      class=\"logout\"\r\n    >\r\n      SIGN OUT\r\n    </button>\r\n  </div>\r\n\r\n</header>\r\n\r\n<main>\r\n  <router-outlet></router-outlet>\r\n</main>\r\n\r\n<footer>\r\n  <button (click)=\"save()\">SAVE</button>\r\n</footer>"
        },
        {
            "name": "FlickrAlbumsComponent",
            "id": "component-FlickrAlbumsComponent-732bf2128a2375624d58eaeb53b130e86bee2c6e89bf3c815385b011943b05265c5307c95738f0c195bf3ab72b8e57454d66179a814598d67968fb7deebce710",
            "file": "src/app/features/flickr-albums/flickr-albums.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-flickr-albums",
            "styleUrls": [
                "./flickr-albums.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./flickr-albums.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedPhotoSetId$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "albumSelect",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable, of, ReplaySubject, Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-flickr-albums',\r\n  templateUrl: './flickr-albums.component.html',\r\n  styleUrls: ['./flickr-albums.component.scss']\r\n})\r\nexport class FlickrAlbumsComponent implements OnInit {\r\n\r\n  public selectedPhotoSetId$: Subject<string> = new Subject();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  albumSelect(id: string) {\r\n    console.log(\"album select: \" + id);\r\n    this.selectedPhotoSetId$.next(id);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../scss/utility';\r\n\r\n:host {\r\n  display: block;\r\n  \r\n  .albums-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: flex-start;\r\n    gap: 1rem;\r\n    border: 1px solid red;\r\n\r\n    > div {\r\n      //border: 1px solid yellow;\r\n    }\r\n\r\n    .albums-list-container {\r\n      flex: 1;\r\n    }\r\n    .album-info-container {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  .grid {\r\n    display: grid;\r\n    gap: 1rem;\r\n    grid-template-columns: 20% 20% 20% 20%;\r\n    \r\n    > div {\r\n      padding: 0.5rem;\r\n      background: darkblue;\r\n      color: white;\r\n      border-radius: 10px;\r\n    }\r\n  }\r\n\r\n  app-photo-set-list {\r\n    display: block;\r\n    //width: 50%;\r\n  }\r\n}",
                    "styleUrl": "./flickr-albums.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Flickr Albums</h1>\r\n\r\n<div class=\"albums-container\">\r\n  <div class=\"albums-list-container\">\r\n    <app-photo-set-list\r\n      (albumIdSelect)=\"albumSelect($event)\"\r\n    ></app-photo-set-list>\r\n  </div>\r\n  <div class=\"album-info-container\">\r\n    <app-photo-set-preview\r\n      [photoSetId$]=\"selectedPhotoSetId$\"\r\n    ></app-photo-set-preview>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-3661993b8ad8cd962a498dfb70a8df5cad972cddbfd30cd08f6f5e9d0eda1ba371fb3f668305cee7b03be8547845baa8b2925c25c8bef90d90f4f4bfc6441fef",
            "file": "src/app/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loginGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../auth/services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.scss']\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService) { }\r\n\r\n  ngOnInit() {}\r\n\r\n  public loginGoogle() {\r\n    this.authService.loginGoogle();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  button {\r\n    position: relative;\r\n    top: 333px;\r\n    background: transparent;\r\n  }\r\n}",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button (click)=\"loginGoogle()\" class=\"google\">\r\n  <img src=\"assets/images/Google/login/btn_google_signin_light_normal_web.png\" />\r\n</button>\r\n"
        },
        {
            "name": "MainNavComponent",
            "id": "component-MainNavComponent-0b75e5985c311a290504081094806c623f3653388253cac323e69ae2aedfc631fd04c5265ebb95d28cf935d98674eac8e9e90b60e252c1529d3dee3478b599bf",
            "file": "src/app/components/main-nav/main-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-nav",
            "styleUrls": [
                "./main-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-nav',\r\n  templateUrl: './main-nav.component.html',\r\n  styleUrls: ['./main-nav.component.scss']\r\n})\r\nexport class MainNavComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../scss/utility';\r\n\r\n:host {\r\n  nav {\r\n    display: inline-flex;\r\n    flex-direction: row;\r\n    gap: 1rem;\r\n\r\n    button { \r\n    }\r\n  }\r\n}",
                    "styleUrl": "./main-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav>\r\n  <button routerLink=\"admin\">ADMIN</button>\r\n  <button routerLink=\"albums\">ALBUMS</button>\r\n  <button>ASSETS</button>\r\n  <button>EVENTS</button>\r\n</nav>"
        },
        {
            "name": "PhotoPreviewComponent",
            "id": "component-PhotoPreviewComponent-48c8ad3816af5901528e2ff3476efa10559cb39f8db1e59003fc8a6d656ef4f57d455d41c7bae4e24845a8980c1c70aa5987122555a331d17eff12df2f19a4ed",
            "file": "src/app/features/flickr-albums/components/photo-preview/photo-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-photo-preview",
            "styleUrls": [
                "./photo-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./photo-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-photo-preview',\r\n  templateUrl: './photo-preview.component.html',\r\n  styleUrls: ['./photo-preview.component.scss']\r\n})\r\nexport class PhotoPreviewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./photo-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>photo-preview works!</p>\r\n"
        },
        {
            "name": "PhotoSetListComponent",
            "id": "component-PhotoSetListComponent-f67ee8bff1df29d4a998a0b29d823dfa6e41f7a6e25e839ac4c29c9b9672fac2a8013996682fa0cdf0eb4886de256f2f4f141f651211a2df592ef756f9de12c8",
            "file": "src/app/features/flickr-albums/components/photo-set-list/photo-set-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-photo-set-list",
            "styleUrls": [
                "./photo-set-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./photo-set-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "albumIdSelect",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "photoSets$",
                    "defaultValue": "this.flickr.getPhotoSets().pipe(map(photoSetList => photoSetList.photoset))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<PhotoSetListEntry[]>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedSetId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "albumSelect",
                    "args": [
                        {
                            "name": "album",
                            "type": "PhotoSetListEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "album",
                            "type": "PhotoSetListEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { PhotoSet, PhotoSetList, PhotoSetListEntry } from 'src/app/services/flickr/flickr.api.model';\r\nimport { FlickrApiService } from 'src/app/services/flickr/flickr.api.service';\r\n\r\n@Component({\r\n  selector: 'app-photo-set-list',\r\n  templateUrl: './photo-set-list.component.html',\r\n  styleUrls: ['./photo-set-list.component.scss']\r\n})\r\nexport class PhotoSetListComponent implements OnInit {\r\n\r\n  @Output() albumIdSelect = new EventEmitter<string>();\r\n\r\n  public photoSets$: Observable<PhotoSetListEntry[]> = this.flickr.getPhotoSets().pipe(map(photoSetList => photoSetList.photoset));\r\n\r\n  public selectedSetId: string = '';\r\n\r\n  constructor(private flickr: FlickrApiService) { \r\n    \r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  public albumSelect(album: PhotoSetListEntry) {\r\n    this.albumIdSelect.emit(album.id);\r\n    this.selectedSetId = album.id;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../scss/utility';\r\n\r\ndiv.photo-set-list-container {\r\n  \r\n}\r\n",
                    "styleUrl": "./photo-set-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "flickr",
                        "type": "FlickrApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "flickr",
                        "type": "FlickrApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"photo-set-list-container\">\r\n  <div *ngIf=\"(photoSets$ | async) as photoSets; else photoSetsContent\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Album</th>\r\n          <th>Photos</th>\r\n          <th>Created</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let photoSet of photoSets || []; index as i\" \r\n          (click)=\"albumSelect(photoSet)\"\r\n          [class.selected]=\"selectedSetId === photoSet.id\"\r\n        >\r\n          <td>{{ photoSet.title._content }}</td>\r\n          <td>{{ photoSet.photos }}</td>\r\n          <td>{{ photoSet.date_create * 1000 | date }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <ng-template #photoSetsContent>\r\n    Loading...\r\n  </ng-template>\r\n  \r\n  <!-- <div *ngFor=\"let photoSet of photoSets$ | async; index as i\">\r\n    <div>\r\n      {{i + 1}}:\r\n    </div>\r\n    <div>\r\n      {{ photoSet.title._content }}\r\n    </div>\r\n    <div>\r\n      {{photoSet.count_photos}}\r\n    </div>\r\n    <div>\r\n      {{ photoSet.date_create * 1000 | date }}\r\n    </div>\r\n  </div> -->\r\n</div>"
        },
        {
            "name": "PhotoSetPreviewComponent",
            "id": "component-PhotoSetPreviewComponent-2825094bdb551e709b7cf7931cee181bf3b8373443f53011e106e176f3c24ba5e22f76fbb9dd70a28312e71f7d50218444bf650f6ce96014f55df5a98681ef79",
            "file": "src/app/features/flickr-albums/components/photo-set-preview/photo-set-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-photo-set-preview",
            "styleUrls": [
                "./photo-set-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./photo-set-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "photoSetId$",
                    "defaultValue": "of('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Observable<string>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "imgThumbnailCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "imgThumbnailsLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhotoSetPhoto[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoIds$",
                    "defaultValue": "of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoSetLoaded$",
                    "defaultValue": "this.flickr.photoSetLoaded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoSetLoading$",
                    "defaultValue": "this.flickr.photoSetLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoSetThumbnailUrls$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "photoUrls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showFlag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "imgComplete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "imgLoaded",
                    "args": [
                        {
                            "name": "url",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { filter, map, mergeMap, publishReplay, refCount, shareReplay, switchMap, takeUntil, tap } from 'rxjs/operators';\r\nimport { PhotoSetPhoto } from 'src/app/services/flickr/flickr.api.model';\r\nimport { FlickrApiService } from 'src/app/services/flickr/flickr.api.service';\r\n\r\n@Component({\r\n  selector: 'app-photo-set-preview',\r\n  templateUrl: './photo-set-preview.component.html',\r\n  styleUrls: ['./photo-set-preview.component.scss'],\r\n  //changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PhotoSetPreviewComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() photoSetId$: Observable<string> = of('');\r\n\r\n  public photoIds$: Observable<PhotoSetPhoto[] | undefined> = of([]);\r\n  public photoSetLoading$: Observable<boolean> = this.flickr.photoSetLoading$;\r\n  public photoSetLoaded$: Observable<boolean> = this.flickr.photoSetLoaded$;\r\n\r\n  //public photoSetPreview$: Observable<string[]> = of([]); // this.flickr.getPhotoSetPreviewThumbnailUrls('72157719812376042');\r\n\r\n  public photoSetThumbnailUrls$: Observable<string[]> | undefined;\r\n\r\n  public photoData: PhotoSetPhoto[] = [];\r\n  public photoUrls: string[] = [];\r\n  public imgThumbnailsLoaded: boolean = false;\r\n  public showLoading: boolean = true;\r\n  public showFlag: boolean = false;\r\n\r\n  private imgThumbnailCount: number = 0;\r\n  private destroy$: Subject<void> = new Subject();\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private flickr: FlickrApiService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.photoUrls = [];\r\n    this.photoIds$ = this.photoSetId$.pipe(\r\n      filter(set => !!set),\r\n      switchMap(id => {\r\n        if (!id) {\r\n          debugger;\r\n          return of([]);\r\n        }\r\n        return this.flickr.getPhotoSet(id).pipe(\r\n          filter(photoSet => !!photoSet),\r\n          map(photoSet => {\r\n            return photoSet?.photo.slice(0, 5);\r\n          }),\r\n        );\r\n      })\r\n    );\r\n\r\n    this.photoSetThumbnailUrls$ = this.photoSetId$.pipe(\r\n      filter(photoSetId => !!photoSetId),\r\n      switchMap(photoSetId => {\r\n        this.showFlag = false;\r\n        console.log('THUMBNAILS: ' + photoSetId);\r\n        return this.flickr.getPhotoSetPreviewThumbnailUrls(photoSetId);\r\n      })\r\n    );\r\n\r\n    // Need subscription active before template would subscribe due to ngIf\r\n    this.photoIds$.pipe(takeUntil(this.destroy$)).subscribe(photoIds => {\r\n      this.photoData = [...photoIds || []];\r\n    });\r\n    this.photoSetThumbnailUrls$.pipe(takeUntil(this.destroy$)).subscribe(urls => {\r\n      this.photoUrls = [...urls || []];\r\n      this.showFlag = true;\r\n    });\r\n\r\n    this.photoSetLoading$.pipe(takeUntil(this.destroy$)).subscribe(loading => {\r\n      this.showLoading = loading && this.imgThumbnailsLoaded;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  public imgLoaded(url: any) {\r\n    console.log('IMG LOADED: ' + this.imgThumbnailCount + ' url: ' + url);\r\n    this.imgThumbnailCount++;\r\n    if (this.imgThumbnailCount === this.photoUrls.length) {\r\n      console.log('RESETTING' + ' url: ' + url);\r\n      this.imgThumbnailsLoaded = true;\r\n      this.imgThumbnailCount = 0;\r\n    }\r\n  }\r\n\r\n  public imgComplete(url: string) {\r\n    console.log('IMG COMPLETE' + ' url: ' + url);\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../scss/utility';\r\n\r\n:host {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  gap: 0.5rem;\r\n  flex-wrap: wrap;\r\n  div {\r\n    img {\r\n      width: 100px;\r\n      height: 75px;\r\n      background-color: utility.$dive-black;\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./photo-set-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "flickr",
                        "type": "FlickrApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "flickr",
                        "type": "FlickrApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- Set loading: {{ photoSetLoading$ | async }}<br>\r\nThumbs loading: {{ imgThumbnailsLoaded }}<br>\r\nUrls: {{ photoUrls?.length }}<br>\r\n{{ showFlag }} -->\r\n\r\n<div *ngIf=\"showLoading\">\r\n  Loading...\r\n</div>\r\n\r\n<div *ngFor=\"let url of photoUrls\">\r\n  <!-- <div [hidden]=\"!showLoading\">Image Loading...</div> -->\r\n  <img [hidden]=\"!showFlag\" [src]=\"url\" (load)=\"imgLoaded(url)\">\r\n</div>\r\n<!-- <ng-template #PhotoData>\r\n  \r\n</ng-template> -->\r\n"
        }
    ],
    "modules": [
        {
            "name": "AlbumsModule",
            "id": "module-AlbumsModule-6e2e4646923abac42e863e99de0e62d4cd6259f705362ebbbd6792cce08efcd7a0ba1b68851f9f6740690bc8f187c22da91e9ff8c63325b6f3e939fc80915c35",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/albums/albums.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AlbumsRoutingModule } from './albums-routing.module';\r\nimport { AlbumsComponent } from './albums.component';\r\nimport { AlbumAssignerComponent } from './components/album-assigner/album-assigner.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AlbumsComponent,\r\n    AlbumAssignerComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    AlbumsRoutingModule\r\n  ]\r\n})\r\nexport class AlbumsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlbumAssignerComponent"
                        },
                        {
                            "name": "AlbumsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AlbumsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlbumsRoutingModule",
            "id": "module-AlbumsRoutingModule-f0c5f6c5016721ff5dec240aea3e198a7adcf9647439202a175bda0ae096caf75f0db2ab198c24a78f4d4381f75e196dba1dc3e06dcf65c65cfa850a50fbf421",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/albums/albums-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AlbumsComponent } from './albums.component';\r\n\r\nconst routes: Routes = [{ path: '', component: AlbumsComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AlbumsRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-dce03fc12d44b6e7b683d22728ce2650324f4d08b04049967745cf03c12c8a41f573c8ad0930f1466e3a5075f1c8d8be8ce35eb82811127824410b09dae53a1b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { AdminPageComponent } from './pages/admin-page/admin-page.component';\r\nimport { MainNavComponent } from './components/main-nav/main-nav.component';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { GraphQLModule } from './graphql.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginPageComponent,\r\n    AdminPageComponent,\r\n    MainNavComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    AngularFireModule.initializeApp(environment.firebaseConfig),\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    GraphQLModule\r\n  ],\r\n  providers: [ ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminPageComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "MainNavComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "GraphQLModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-1080132c5eb42f2e1a1e0653b6e0d63ea193a9aa03b4766552d329d441efd13c2845926a33c57344cb22ee3bad9cd361f399a1c0e37291a77cd0e9c501d67835",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthGuard } from './auth/services/guard/auth.guard';\r\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\r\nimport { AdminPageComponent } from './pages/admin-page/admin-page.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\r\n  { path: 'login', component: LoginPageComponent },\r\n  {\r\n    path: 'admin',\r\n    canActivate: [AuthGuard],\r\n    component: AdminPageComponent,\r\n  },\r\n  { path: 'flickr-albums', loadChildren: () => \"import('./features/flickr-albums/flickr-albums.module').then(m => m.FlickrAlbumsModule)\" },\r\n  { path: 'albums', loadChildren: () => \"import('./features/albums/albums.module').then(m => m.AlbumsModule)\" },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FlickrAlbumsModule",
            "id": "module-FlickrAlbumsModule-903bb5a4322fd88983a60df8d765602a1283a8e0be58f641c5531f5c6ab81e2a4a40bfef0cb982d7d056ebe1cd689e73879bc0e4f51aed61111102fcb7e95fa4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/flickr-albums/flickr-albums.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FlickrAlbumsRoutingModule } from './flickr-albums-routing.module';\r\nimport { FlickrAlbumsComponent } from './flickr-albums.component';\r\nimport { PhotoSetListComponent } from './components/photo-set-list/photo-set-list.component';\r\nimport { PhotoSetPreviewComponent } from './components/photo-set-preview/photo-set-preview.component';\r\nimport { PhotoPreviewComponent } from './components/photo-preview/photo-preview.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FlickrAlbumsComponent,\r\n    PhotoSetListComponent,\r\n    PhotoSetPreviewComponent,\r\n    PhotoPreviewComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FlickrAlbumsRoutingModule\r\n  ]\r\n})\r\nexport class FlickrAlbumsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FlickrAlbumsComponent"
                        },
                        {
                            "name": "PhotoPreviewComponent"
                        },
                        {
                            "name": "PhotoSetListComponent"
                        },
                        {
                            "name": "PhotoSetPreviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FlickrAlbumsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FlickrAlbumsRoutingModule",
            "id": "module-FlickrAlbumsRoutingModule-f09cc50db3a47c98a322e0adf605adf108a2a840975981cff95aae9a37f2481e03ab6ff9f0d4a8d21f8e46d9c8a9cfb3cdce3e9be64f091ace5950bc1a910704",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/flickr-albums/flickr-albums-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FlickrAlbumsComponent } from './flickr-albums.component';\r\n\r\nconst routes: Routes = [{ path: '', component: FlickrAlbumsComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class FlickrAlbumsRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GraphQLModule",
            "id": "module-GraphQLModule-376e33d7cc8124bf0b0e69442ad6d0b138bbfb228d3d3fffd608939dbf17d75e1873d8009e45a51dadc69f11b79f106f0f6438f4f4740365a1dfbcce3f1edcd3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/graphql.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { APOLLO_OPTIONS } from 'apollo-angular';\r\nimport { ApolloClientOptions, InMemoryCache, makeVar, ReactiveVar } from '@apollo/client/core';\r\n//import { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-angular/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\nconst uri = 'https://concrete-hookworm-64.hasura.app/v1/graphql'; // <-- add the URL of the GraphQL server here\r\nconst headers = new HttpHeaders({\r\n  'x-hasura-admin-secret': environment.hasuraConfig.gql_admin_secret\r\n});\r\n\r\nexport const dataModifiedVar: ReactiveVar<boolean> = makeVar<boolean>(false);\r\n\r\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\r\n  return {\r\n    link: httpLink.create({\r\n      uri,\r\n      headers,\r\n    }),\r\n    cache: new InMemoryCache({\r\n      typePolicies: {\r\n        album_location: {\r\n          fields: {\r\n            modified: {\r\n              read() {\r\n                //const r = localStorage.getItem('dataModified');\r\n                const r = dataModifiedVar();\r\n                return r;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }),\r\n  };\r\n}\r\n\r\n@NgModule({\r\n  providers: [\r\n    {\r\n      provide: APOLLO_OPTIONS,\r\n      useFactory: createApollo,\r\n      deps: [HttpLink],\r\n    },\r\n  ],\r\n})\r\nexport class GraphQLModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "allowedStyle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/animations/header.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "style({\r\n  top: '1rem',\r\n  left: '1rem',\r\n  transform: 'translateX(0%)',\r\n  width: '220px',\r\n  opacity: 0.15,\r\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "dataModifiedVar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ReactiveVar<boolean>",
                "defaultValue": "makeVar<boolean>(false)"
            },
            {
                "name": "DefaultState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/main-nav/main-nav.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/login-page/login-page.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  firebaseConfig: {\n    apiKey: \"AIzaSyAV7hD9iOJD_XMVsd8uU88g63ap-8_r7jI\",\n    authDomain: \"diveinnadmin.firebaseapp.com\",\n    projectId: \"diveinnadmin\",\n    storageBucket: \"diveinnadmin.appspot.com\",\n    messagingSenderId: \"100135443835\",\n    appId: \"1:100135443835:web:1ae5f4d17bda5ffa9631de\",\n    measurementId: \"G-W25N2VK7PZ\"\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyAV7hD9iOJD_XMVsd8uU88g63ap-8_r7jI\",\r\n    authDomain: \"diveinnadmin.firebaseapp.com\",\r\n    projectId: \"diveinnadmin\",\r\n    storageBucket: \"diveinnadmin.appspot.com\",\r\n    messagingSenderId: \"100135443835\",\r\n    appId: \"1:100135443835:web:1ae5f4d17bda5ffa9631de\",\r\n    measurementId: \"G-W25N2VK7PZ\"\r\n  },\r\n  flickrConfig: {\r\n    key: '306d51374865d4e6fa4b32b0fd5a7998',\r\n    secret: '65d13dd1fe465537',\r\n    user: '193893336@N02',\r\n  },\r\n  hasuraConfig: {\r\n    name: 'Dive-Inn-Admin',\r\n    gql_admin_secret: 'DiveInnHasAGqlSecret',\r\n    endpoint: 'https://concrete-hookworm-64.hasura.app/v1/graphql'\r\n  },\r\n  apolloConfig: {\r\n    APOLLO_KEY: 'service:Dive-Inn-Admin:TWTacm-GgHaEn2Ew4JQ8ng',\r\n    APOLLO_GRAPH_ID: 'Dive-Inn-Admin',\r\n    APOLLO_GRAPH_VARIANT: 'current',\r\n    APOLLO_SCHEMA_REPORTING: 'true',\r\n  }\r\n}"
            },
            {
                "name": "f",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new FlickrApiServiceMock()"
            },
            {
                "name": "headerAnimations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/animations/header.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  trigger('headerTransitions', [\r\n    state('notAllowed', style({\r\n      left: '50%',\r\n      top: '400px',\r\n      transform: 'translateX(-50%)',\r\n      opacity: 1\r\n    })),\r\n    state('allowed', style({\r\n      left: '50%',\r\n      top: '440px',\r\n      transform: 'translateX(-50%)',\r\n      opacity: 0\r\n    })),\r\n    transition('* <=> *', animate('1s ease-in-out'))\r\n    //transition('void => *', animate('10s ease-in-out')),\r\n    // transition('notAllowed <=> allowed', [\r\n    //   query('img', animate('1s ease-in-out', style({ width: '120px' })))\r\n    // ])\r\n  ]),\r\n  trigger('logoTransitions', [\r\n    state('*', notAllowedStyle),\r\n    state('notAllowed', notAllowedStyle),\r\n    state('allowed', allowedStyle),\r\n    transition('* => *', animate('1s ease-in-out')),\r\n    transition('notAllowed <=> allowed', animate('1s ease-in-out'))\r\n  ])\r\n]"
            },
            {
                "name": "headers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new HttpHeaders({\r\n  'x-hasura-admin-secret': environment.hasuraConfig.gql_admin_secret\r\n})"
            },
            {
                "name": "notAllowedStyle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/animations/header.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "style({\r\n  top: '0',\r\n  left: '50%',\r\n  transform: 'translateX(-50%)',\r\n  opacity: 1,\r\n})"
            },
            {
                "name": "photoSetList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/flickr/flickr.api.service.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PhotoSetList",
                "defaultValue": "{\r\n  page: 1,\r\n  perpage: 10,\r\n  pages: 20,\r\n  photoset: photoSetListEntries,\r\n  total: 201,\r\n}"
            },
            {
                "name": "photoSetListEntries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/flickr/flickr.api.service.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PhotoSetListEntry[]",
                "defaultValue": "[\r\n  {\r\n    id: 'id1',\r\n    date_create: 0,\r\n    description: { _content: 'PhotoSetListEntry 1 Description' },\r\n    photos: 10,\r\n    title: { _content: 'PhotoSetListEntry 1' },\r\n  }\r\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/main-nav/main-nav.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MainNavComponent>",
                "defaultValue": "(args: MainNavComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/login-page/login-page.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoginPageComponent>",
                "defaultValue": "(args: LoginPageComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AlbumAssignerComponent>",
                "defaultValue": "(args: AlbumAssignerComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "uri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/graphql.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://concrete-hookworm-64.hasura.app/v1/graphql'"
            }
        ],
        "functions": [
            {
                "name": "createApollo",
                "file": "src/app/graphql.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ApolloClientOptions<any>",
                "jsdoctags": [
                    {
                        "name": "httpLink",
                        "type": "HttpLink",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Album",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AlbumByLocation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AlbumByLocationResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "AlbumByLocationVariables",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/animations/header.animations.ts": [
                {
                    "name": "allowedStyle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/animations/header.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "style({\r\n  top: '1rem',\r\n  left: '1rem',\r\n  transform: 'translateX(0%)',\r\n  width: '220px',\r\n  opacity: 0.15,\r\n})"
                },
                {
                    "name": "headerAnimations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/animations/header.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  trigger('headerTransitions', [\r\n    state('notAllowed', style({\r\n      left: '50%',\r\n      top: '400px',\r\n      transform: 'translateX(-50%)',\r\n      opacity: 1\r\n    })),\r\n    state('allowed', style({\r\n      left: '50%',\r\n      top: '440px',\r\n      transform: 'translateX(-50%)',\r\n      opacity: 0\r\n    })),\r\n    transition('* <=> *', animate('1s ease-in-out'))\r\n    //transition('void => *', animate('10s ease-in-out')),\r\n    // transition('notAllowed <=> allowed', [\r\n    //   query('img', animate('1s ease-in-out', style({ width: '120px' })))\r\n    // ])\r\n  ]),\r\n  trigger('logoTransitions', [\r\n    state('*', notAllowedStyle),\r\n    state('notAllowed', notAllowedStyle),\r\n    state('allowed', allowedStyle),\r\n    transition('* => *', animate('1s ease-in-out')),\r\n    transition('notAllowed <=> allowed', animate('1s ease-in-out'))\r\n  ])\r\n]"
                },
                {
                    "name": "notAllowedStyle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/animations/header.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "style({\r\n  top: '0',\r\n  left: '50%',\r\n  transform: 'translateX(-50%)',\r\n  opacity: 1,\r\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/graphql.module.ts": [
                {
                    "name": "dataModifiedVar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReactiveVar<boolean>",
                    "defaultValue": "makeVar<boolean>(false)"
                },
                {
                    "name": "headers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new HttpHeaders({\r\n  'x-hasura-admin-secret': environment.hasuraConfig.gql_admin_secret\r\n})"
                },
                {
                    "name": "uri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/graphql.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://concrete-hookworm-64.hasura.app/v1/graphql'"
                }
            ],
            "src/app/components/main-nav/main-nav.component.stories.ts": [
                {
                    "name": "DefaultState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/main-nav/main-nav.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/main-nav/main-nav.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MainNavComponent>",
                    "defaultValue": "(args: MainNavComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/pages/login-page/login-page.component.stories.ts": [
                {
                    "name": "DefaultState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/login-page/login-page.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/login-page/login-page.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoginPageComponent>",
                    "defaultValue": "(args: LoginPageComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts": [
                {
                    "name": "DefaultState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "f",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new FlickrApiServiceMock()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AlbumAssignerComponent>",
                    "defaultValue": "(args: AlbumAssignerComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  firebaseConfig: {\n    apiKey: \"AIzaSyAV7hD9iOJD_XMVsd8uU88g63ap-8_r7jI\",\n    authDomain: \"diveinnadmin.firebaseapp.com\",\n    projectId: \"diveinnadmin\",\n    storageBucket: \"diveinnadmin.appspot.com\",\n    messagingSenderId: \"100135443835\",\n    appId: \"1:100135443835:web:1ae5f4d17bda5ffa9631de\",\n    measurementId: \"G-W25N2VK7PZ\"\n  }\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyAV7hD9iOJD_XMVsd8uU88g63ap-8_r7jI\",\r\n    authDomain: \"diveinnadmin.firebaseapp.com\",\r\n    projectId: \"diveinnadmin\",\r\n    storageBucket: \"diveinnadmin.appspot.com\",\r\n    messagingSenderId: \"100135443835\",\r\n    appId: \"1:100135443835:web:1ae5f4d17bda5ffa9631de\",\r\n    measurementId: \"G-W25N2VK7PZ\"\r\n  },\r\n  flickrConfig: {\r\n    key: '306d51374865d4e6fa4b32b0fd5a7998',\r\n    secret: '65d13dd1fe465537',\r\n    user: '193893336@N02',\r\n  },\r\n  hasuraConfig: {\r\n    name: 'Dive-Inn-Admin',\r\n    gql_admin_secret: 'DiveInnHasAGqlSecret',\r\n    endpoint: 'https://concrete-hookworm-64.hasura.app/v1/graphql'\r\n  },\r\n  apolloConfig: {\r\n    APOLLO_KEY: 'service:Dive-Inn-Admin:TWTacm-GgHaEn2Ew4JQ8ng',\r\n    APOLLO_GRAPH_ID: 'Dive-Inn-Admin',\r\n    APOLLO_GRAPH_VARIANT: 'current',\r\n    APOLLO_SCHEMA_REPORTING: 'true',\r\n  }\r\n}"
                }
            ],
            "src/app/services/flickr/flickr.api.service.mock.ts": [
                {
                    "name": "photoSetList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/flickr/flickr.api.service.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhotoSetList",
                    "defaultValue": "{\r\n  page: 1,\r\n  perpage: 10,\r\n  pages: 20,\r\n  photoset: photoSetListEntries,\r\n  total: 201,\r\n}"
                },
                {
                    "name": "photoSetListEntries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/flickr/flickr.api.service.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PhotoSetListEntry[]",
                    "defaultValue": "[\r\n  {\r\n    id: 'id1',\r\n    date_create: 0,\r\n    description: { _content: 'PhotoSetListEntry 1 Description' },\r\n    photos: 10,\r\n    title: { _content: 'PhotoSetListEntry 1' },\r\n  }\r\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/graphql.module.ts": [
                {
                    "name": "createApollo",
                    "file": "src/app/graphql.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ApolloClientOptions<any>",
                    "jsdoctags": [
                        {
                            "name": "httpLink",
                            "type": "HttpLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/features/albums/components/album-assigner/album-assigner.component.ts": [
                {
                    "name": "Album",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "AlbumByLocation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "AlbumByLocationResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "AlbumByLocationVariables",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "login",
                        "component": "LoginPageComponent"
                    },
                    {
                        "path": "admin",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "component": "AdminPageComponent"
                    },
                    {
                        "path": "flickr-albums",
                        "loadChildren": "./features/flickr-albums/flickr-albums.module#FlickrAlbumsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/features/flickr-albums/flickr-albums-routing.module.ts",
                                        "module": "FlickrAlbumsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "FlickrAlbumsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "FlickrAlbumsModule"
                            }
                        ]
                    },
                    {
                        "path": "albums",
                        "loadChildren": "./features/albums/albums.module#AlbumsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/features/albums/albums-routing.module.ts",
                                        "module": "AlbumsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AlbumsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AlbumsModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/animations/header.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allowedStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/animations/header.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headerAnimations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/animations/header.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "notAllowedStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth/auth.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth/auth.service.org.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/guard/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-nav/main-nav.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-nav/main-nav.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-nav/main-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/albums/albums.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlbumsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "f",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/albums/components/album-assigner/album-assigner.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/albums/components/album-assigner/album-assigner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlbumAssignerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/flickr-albums/components/photo-preview/photo-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/flickr-albums/components/photo-set-list/photo-set-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoSetListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/flickr-albums/components/photo-set-preview/photo-set-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PhotoSetPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/flickr-albums/flickr-albums.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FlickrAlbumsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createApollo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataModifiedVar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/graphql.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/admin-page/admin-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login-page/login-page.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login-page/login-page.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSet",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSetList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSetListEntry",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSetPhoto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSize",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PhotoSizes",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.service.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FlickrApiServiceMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.service.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "photoSetList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.service.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "photoSetListEntries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/flickr/flickr.api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FlickrApiService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}